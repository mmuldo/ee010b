; SetCursor(r, c, c1, c2)
; =======================
;
; Description
; -----------
; Sets the pixel at row r, column c of the display grid to blink between
; color c1 and color c2, switching every 500 ms. This indicates to the user
; that the cursor is located at row r, column c. The possible colors are
; blank, red, green, and yellow.
;
; Operational Description
; -----------------------
; Sets display[r, c] according to c1, cursorRed2 and cursorGreen2 according to 
; c2, cursorRow to r, cursorColumn to c, such the the display multiplexor 
; knows how to set up the blinking of the cursor location.
;
; Arguments
; ---------
; r (int): row of the display (between 0 and 7)
; c (int): column of the display (between 0 and 7)
; c1 (int): first color for the cursor to blink (0: blank, 1: red, 2: green, 
;   3: yellow)
; c2 (int): second color for the cursor to blink (0: blank, 1: red, 2: green, 
;   3: yellow)
;
; Return Values
; -------------
; None
;
; Global Variables
; ----------------
; None
;
; Shared Variables
; ----------------
; cursorRow (int): W
; cursorColumn (int): W
; cursorRedColor1 (int): W
; cursorGreenColor1 (int): W
; cursorRedColor2 (int): W
; cursorGreenColor2 (int): W
;
; Local Variables
; ---------------
; None
;
; Inputs
; ------
; None
;
; Outputs
; -------
; None
;
; Error Handling
; --------------
; if r or c is outside of 0 and 7:
;   this is fine: in fact, we use this to "unset" the cursor (such that
;   no pixel on the display is blinking)
; if c1 or c2 is outside of 0 and 3:
;   if they are above 3, they get reset to 3; if they are below 0, they get
;   reset to 0.
;
; Algorithms
; ----------
; None
;
; Data Structures
; ---------------
; None
;
; Registers Used
; --------------
; None
;
; Stack Depth
; -----------
; None
;
; Limitations
; -----------
; None
;
; Known Bugs
; ----------
; None
;
; Special Notes
; -------------
; None
;
; Pseudocode
; ----------
; 
; cursorRow = r
; cursorColumn = c
;
; IF c1 > YELLOW:
;   c1 = YELLOW
; ELSE IF c1 < 0:
;   c1 = OFF
; 
; IF c2 > YELLOW:
;   c2 = YELLOW
; ELSE IF c2 < 0:
;   c2 = OFF
;
; cursorRedColor1 = 0x01 & c1
; cursorGreenColor1 = c1 >> 1
; cursorRedColor2 = 0x01 & c2
; cursorGreenColor2 = c2 >> 1
